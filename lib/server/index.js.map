{"version":3,"sources":["../../src/server/index.js"],"names":["_","require","Koa","app","db","tobi","name","species","loki","jane","pets","list","ctx","names","Object","keys","body","join","show","pet","throw","use","get","listen","console","log"],"mappings":"AAAA,MAAMA,IAAIC,QAAQ,WAAR,CAAV;AACA,MAAMC,MAAMD,QAAQ,KAAR,CAAZ;AACA,MAAME,MAAM,IAAID,GAAJ,EAAZ;;AAEA,MAAME,KAAK;AACTC,UAAM,EAAEC,MAAM,MAAR,EAAgBC,SAAS,QAAzB,EADG;AAETC,UAAM,EAAEF,MAAM,MAAR,EAAgBC,SAAS,QAAzB,EAFG;AAGTE,UAAM,EAAEH,MAAM,MAAR,EAAgBC,SAAS,QAAzB;AAHG,CAAX;;AAMA,MAAMG,OAAO;AACXC,UAAOC,GAAD,IAAS;AACb,cAAMC,QAAQC,OAAOC,IAAP,CAAYX,EAAZ,CAAd;AACAQ,YAAII,IAAJ,GAAW,WAAWH,MAAMI,IAAN,CAAW,IAAX,CAAtB;AACD,KAJU;;AAMXC,UAAM,CAACN,GAAD,EAAMN,IAAN,KAAe;AACnB,cAAMa,MAAMf,GAAGE,IAAH,CAAZ;AACA,YAAI,CAACa,GAAL,EAAU,OAAOP,IAAIQ,KAAJ,CAAU,sBAAV,EAAkC,GAAlC,CAAP;AACVR,YAAII,IAAJ,GAAWG,IAAIb,IAAJ,GAAW,QAAX,GAAsBa,IAAIZ,OAArC;AACD;AAVU,CAAb;;AAaAJ,IAAIkB,GAAJ,CAAQrB,EAAEsB,GAAF,CAAM,OAAN,EAAeZ,KAAKC,IAApB,CAAR;AACAR,IAAIkB,GAAJ,CAAQrB,EAAEsB,GAAF,CAAM,aAAN,EAAqBZ,KAAKQ,IAA1B,CAAR;;AAEAf,IAAIoB,MAAJ,CAAW,IAAX;AACAC,QAAQC,GAAR,CAAY,wBAAZ;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA","file":"index.js","sourcesContent":["const _ = require('koa-route');\nconst Koa = require('koa');\nconst app = new Koa();\n\nconst db = {\n  tobi: { name: 'tobi', species: 'ferret' },\n  loki: { name: 'loki', species: 'ferret' },\n  jane: { name: 'jane', species: 'ferret' }\n};\n\nconst pets = {\n  list: (ctx) => {\n    const names = Object.keys(db);\n    ctx.body = 'pets: ' + names.join(', ');\n  },\n\n  show: (ctx, name) => {\n    const pet = db[name];\n    if (!pet) return ctx.throw('cannot find that pet', 404);\n    ctx.body = pet.name + ' is a ' + pet.species;\n  }\n};\n\napp.use(_.get('/pets', pets.list));\napp.use(_.get('/pets/:name', pets.show));\n\napp.listen(3000);\nconsole.log('listening on port 3000');\n\n\n//var koa = require('koa');\n//var app = module.exports = koa();\n//var routes = require('koa-route');\n\n//const greetings = async (ctx, next) => {\n//    ctx.body = 'self';\n//    await next();\n//    ctx.body += ' Remember to subscribe';\n//}\n//const app = new koa();\n//app.use(routes.get(\"/user/:id\", getinfo));\n//function* getinfo(id) {\n//  this.body = \"you passsed me :\" + id;\n//};\n//const app = new koa();\n//app.use(greetings);\n//app.listen(3000);\n//console.log(\"The app is listening on port 3000\");\n\n\n//mport config from 'config';\n\n//import * as steem from '@steemit/steem-js';\n\n//const path = require('path');\n//const ROOT = path.join(__dirname, '../..');\n\n// Tell `require` calls to look into `/app` also\n// it will avoid `../../../../../` require strings\n\n// use Object.assign to bypass transform-inline-environment-variables-babel-plugin (process.env.NODE_PATH= will not work)\n//Object.assign(process.env, { NODE_PATH: path.resolve(__dirname, '..') });\n\n//require('module').Module._initPaths();\n\n// Load Intl polyfill\n// require('utils/intl-polyfill')(require('./config/init').locales);\n\n/*\nglobal.$STM_Config = {\n    fb_app: config.get('facebook_app_id'),\n    steemd_connection_client: config.get('steemd_connection_client'),\n    steemd_connection_server: config.get('steemd_connection_server'),\n    steemd_use_appbase: config.get('steemd_use_appbase'),\n    chain_id: config.get('chain_id'),\n    address_prefix: config.get('address_prefix'),\n    img_proxy_prefix: config.get('img_proxy_prefix'),\n    ipfs_prefix: config.get('ipfs_prefix'),\n    disable_signups: config.get('disable_signups'),\n    read_only_mode: config.get('read_only_mode'),\n    registrar_fee: config.get('registrar.fee'),\n    upload_image: config.get('upload_image'),\n    site_domain: config.get('site_domain'),\n    facebook_app_id: config.get('facebook_app_id'),\n    google_analytics_id: config.get('google_analytics_id'),\n};\n\nconst WebpackIsomorphicTools = require('webpack-isomorphic-tools');\nconst WebpackIsomorphicToolsConfig = require('../../webpack/webpack-isotools-config');\n\nglobal.webpackIsomorphicTools = new WebpackIsomorphicTools(\n    WebpackIsomorphicToolsConfig\n);\n\nglobal.webpackIsomorphicTools.server(ROOT, () => {\n    steem.api.setOptions({\n        url: config.steemd_connection_client,\n        useAppbaseApi: !!config.steemd_use_appbase,\n    });\n    steem.config.set('address_prefix', config.get('address_prefix'));\n    steem.config.set('chain_id', config.get('chain_id'));\n\n    // const CliWalletClient = require('shared/api_client/CliWalletClient').default;\n    // if (process.env.NODE_ENV === 'production') connect_promises.push(CliWalletClient.instance().connect_promise());\n    try {\n        require('./server');\n    } catch (error) {\n        console.error(error);\n        process.exit(1);\n    }\n});\n*/\n"]}